#!/bin/bash
#
# Copyright 2018 (c) Capuccino <enra@sayonika.moe>
#
#
# Feel free to improve this script on GitHub

# I ran out of ideas here so feel free to do some weird lettering shit that matches this more
while getopts ":i:g:u:l:x:d:r" o; do
    case "${o}" in
        d)
            disk_size=${OPTARG}
            ;;
        r)
            ram_size=${OPTARG}
            ;;
        i)
            image=${OPTARG}
            ;;
        u)
            multi+=${OPTARG}
            ;;
        g)  
            gpu_vendor_id=${OPTARG}
            ;;
        l) 
            gpu_model_id=${OPTARG}
            ;; 
        x) 
            gpu_pci_id=${OPTARG}
            ;;
        *)
            echo "Usage: $0 -i <image_file> -u <usb_vendor_id> -g <gpu_vendor_id> -l <gpu_model_id> -x <gpu_pci_id> -d <disk_size> -r <ram_size>"
            echo "You can grab the USB vendor ID from lsusb and for the GPU Vendor, GPU Model, and the Bus ID, use lspci."
            echo "Disk Size is in GiB, so when denoting 50Gi, it would be 50Gi, obviously."
            echo "RAM is in MiB, so when denoting 2Gi, it would be 2048MiB."
            exit 1;
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${gpu_model_id}" ] || [ -z "${gpu_vendor_id}" ] || [ -z "${multi}" ] || [ -z "${image}" ] || [ -z "${gpu_pci_id}" ]; then
    echo "Usage: $0 -i <image_file> -u <usb_vendor_id> -g <gpu_vendor_id> -l <gpu_model_id> -x <gpu_pci_id> -d <disk_size> -r <ram_size>"
    echo "You can grab the USB vendor ID from lsusb and for the GPU Vendor, GPU Model, and the Bus ID, use lspci."
    echo "Disk Size is in GiB, so when denoting 50Gi, it would be 50Gi, obviously."
    echo "RAM is in MiB, so when denoting 2Gi, it would be 2048MiB."
    exit 1;
fi

if [ -z "${disk_size}" ] && [ -z "${ram_size}" ]; then
   # Add some sane defaults
   ram_size="2048"
   disk_size="50"
elif [ -n "${disk_size}" ] && [ -z "${ram_size}" ]; then
   ram_size="2048"
elif [ -z "${disk_size}" ] && [ -n "${ram_size}" ]; then
   disk_size="50"
fi
# Check first if QEMU is installed

arch="$(uname -p)"
export qemu_target_arch=

case $arch in
  x86_64) qemu_target_arch="qemu-system-x86_64" ;;
  i386) qemu_target_arch="qemu-system-i386" ;;
  arm) qemu_target_arch="qemu-system-arm" ;;
  ppc64el) qemu_target_arch="qemu-system-powerpc" ;;
  *) echo "Unsupported arch"; exit 1 ;;
esac

qemu_bin="$(command -v $qemu_target_arch)"

if [ -z "$qemu_bin" ]; then
  echo "QEMU not installed. Please install QEMU first before using this script."
  exit 1;
fi

if [ ! -f "$image" ]; then
  echo "Error: image does not exist"
  exit 2;
fi

echo "Mounting Image $image."
echo "If you ever encounter issues with this script, please report immediately so we know what we can do."
sleep 3


# This is mostly required as QEMU/KVM will use the vfio drivers to do the passthrough

echo "Enabling vfio drivers"
  sudo modprobe vfio
  sudo modprobe vfio_pci
  echo "0000:$gpu_pci_id" | sudo tee /sys/bus/pci/devices/0000:01:00.1/driver/unbind
  echo "$gpu_vendor_id" "$gpu_model_id"| sudo tee /sys/bus/pci/drivers/vfio-pci/new_id
  echo "$gpu_vendor_id" aa88 | sudo tee /sys/bus/pci/drivers/vfio-pci/new_id 

# If you're seeing this that means I got bored and I literally provided you a prebuilt SeaBIOS
# Which I'm certain probably wouldn't be up to date.

qemu_vgabios_bin="$HOME/.qemu/bios/vgabios.bin"
qemu_disk_img="$HOME/.qemu/vm.img"

if [ ! -f "$qemu_vgabios_bin" ]; then
    echo "Acquiring SeaBIOS..."
    mkdir -p "$HOME/.qemu/bios"
    wget -O "$qemu_vgabios_bin" "https://github.com/sr229/LnxSandbox/raw/master/lib/bios/vgabios.bin"
fi

if [ ! -f "$qemu_disk_img" ]; then
    echo "Making Disk image for VM, this may take a while."
    qemu-img create -f qcow2 "$qemu_disk_img" "$disk_size\g"
fi


export QEMU_AUDIO_DRV=alsa QEMU_AUDIO_TIMER_PERIOD=0
cmd="$qemu_bin \
    -enable-kvm -M q35 -m $ram_size -cpu host -smp 4,sockets=1,cores=4,threads=1 \
    -cpu host,kvm=off \
    -bios /usr/share/qemu/bios.bin -vga none \
    -device ioh3420,bus=pcie.0,addr=1c.0,multifunction=on,port=1,chassis=1,id=root.1 \
    -device piix4-ide,bus=pcie.0,id=piix4-ide \
    -device vfio-pci,host=01:00.0,bus=root.1,addr=00.0,multifunction=on,x-vga=on,romfile=$qemu_vgabios_bin \
    -device vfio-pci,host=01:00.1,bus=pcie.0 \
    -soundhw ac97 \
    -drive file=$qemu_disk_img,id=disk,format=raw -device ide-hd,bus=piix4-ide.0,drive=disk \
    -drive file=$image,id=isocd -device ide-cd,bus=piix4-ide.1,drive=isocd \
"

for val in "${multi[@]}"; do
  appended_cmd="$(printf "%s\n-usb -usbdevice host:$val" "$cmd" | sed -e '$s/$/;/')"
done

exec "$appended_cmd"